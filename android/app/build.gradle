def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()

def keystorePropertiesFile = rootProject.file('key.properties')

if (keystorePropertiesFile.exists()) {

keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "org.c19bayshield.c19bayshield"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs { 
        if (System.getenv()["CI"] == true ){
            logger.quiet('CI')
            file(rootProject.file('key.properties')).with { propFile ->  
                if (propFile.canRead()) {  
            release {  
                keyAlias keystoreProperties['keyAlias']  
                keyPassword keystoreProperties['keyPassword']  
                storeFile file(keystoreProperties['storeFile'])  
                storePassword keystoreProperties['storePassword']
                
            }}  
                else {  
                    logger.quiet('not signed')  
                }  
            }  
        }
    }  
  
    buildTypes {  
        release {
            if (System.getenv()["CI"] == true ){  
                logger.quiet('CI')
                file(rootProject.file('key.properties')).with { propFile ->  
                    if (propFile.canRead()) {  
                        // because we can read the keystore  
    // we are building locally // so sign locally // otherwise build an unsigned apk for later signing by the CI/CD provider  signingConfig signingConfigs.release  
                    }  
                }  
    
                applicationVariants.all { variant ->  
                    variant.outputs.all { output ->  
                        output.outputFileName = "app-release.apk"  
                    }  
                }  
            // TODO: Add your own signing config for the release build.  
  // Signing with the debug keys for now, so `flutter run --release` works.  
                signingConfig signingConfigs.release  
            }else{
                logger.quiet('No CI')
                signingConfig signingConfigs.debug 
            }
        }  
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation 'com.google.firebase:firebase-analytics:17.3.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.0.0-beta04'
    implementation 'com.google.firebase:firebase-perf:19.0.6'
}

apply plugin: 'com.google.gms.google-services'
